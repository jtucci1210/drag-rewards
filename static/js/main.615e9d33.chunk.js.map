{"version":3,"sources":["reward.js","category.js","App.js","serviceWorker.js","index.js"],"names":["ItemTypes","Reward","title","idx","updateReward","createID","catID","useDrag","item","type","begin","monitor","collect","isDragging","drag","className","ref","style","opacity","fontWeight","cursor","onClick","Category","index","renderRewards","createReward","useDrop","accept","drop","undefined","App","categories","useState","saved","window","localStorage","getItem","length","JSON","parse","err","console","log","createdRewards","setCreatedRewards","numRewards","setNumRewards","map","reward","key","categoryIdx","currRewards","Object","assign","rewardID","some","newReward","push","rewardIdx","findIndex","splice","useEffect","setItem","stringify","Boolean","location","hostname","match","ReactDOM","render","StrictMode","DndProvider","backend","HTML5Backend","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.615e9d33.chunk.js","sourcesContent":["import React from 'react';\nimport { useDrag } from 'react-dnd';\n\nexport const ItemTypes = {\n    REWARD: 'reward'\n}\n\nfunction Reward({ title, idx, updateReward, createID, catID }){\n\n    //first obj is a props obj w/ properties such as isDragging\n    //second is a ref function to attach DOM ele to React DND\n    const [{ isDragging }, drag] = useDrag({\n        //item is a required arg, type is what the drop function recognizes\n        item: { type: ItemTypes.REWARD },\n        //begin allows you to specify what info is returned to the drop fxn, overwrites the info from item\n        begin: (monitor) => ({\n            type: ItemTypes.REWARD,\n            idx: idx,\n            title: title,\n            catID: catID,\n            createID: createID\n        }),\n        collect: (monitor) => ({\n            isDragging: !!monitor.isDragging()\n        })\n    })\n\n    return (\n\t\t<div className=\"reward-item\"\n            ref={drag}\n            style={{\n                opacity: isDragging ? 0.5 : 1,\n                fontWeight: 'bold',\n                cursor: 'move',\n            }}>\n            {title}\n            {updateReward\n            ? <span className=\"delete-button\" onClick={() => updateReward(createID)}>X</span>\n            : null}\n        </div>\n\n    )\n}\n\nexport default Reward;","import React from 'react';\nimport { useDrop } from 'react-dnd';\nimport Reward, { ItemTypes } from './reward';\n\nfunction Category({title, index, renderRewards, createReward, updateReward}){\n\n    //collectedProps are the properties avail if needed, drop is ref for the DOM obj\n    const [collectedProps, drop] = useDrop({\n        //accept specifies which types it will be droppable for\n        accept: ItemTypes.REWARD,\n        drop: (item, monitor) => {\n            //will only have a catID if it has already been placed in one of the swim lanes\n            item.catID !== undefined ? updateReward(item.createID, index) : createReward(index, item)\n        }\n    })\n\n    return(\n        <div className=\"category-item\">\n            <div className=\"category-name\">{title}</div>\n            <div className=\"category-lane\" ref={drop}>\n                {renderRewards(index)}\n            </div>\n        </div>\n    )\n}\n\nexport default Category;","import React, { useState, useEffect } from 'react';\nimport Reward from './reward';\nimport Category from './category';\nimport './App.css';\n\n\n//when you drag from the og rewards a new reward needs to be created and added to state when dropped\n//when dragging from a category you need to move that actual reward by changing the catID and updating state\n//need a delete reward category for the moveable rewards\n//if catID is null thats when you call create, if it exists thats when you call move\n\nfunction App() {\n\n\n\tconst rewards = [\"R1\", \"R2\", \"R3\", \"R4\", \"R5\"];\n\tconst categories = [\"C1\", \"C2\", \"C3\", \"C4\", \"C5\"];\n\t\n\tconst [createdRewards, setCreatedRewards] = useState(() => {\n\t\tlet saved = window.localStorage.getItem(\"savedRewards\") || [];\n\t\tif (saved.length !== 0) {\n\t\t\ttry{ //good practice to wrap in a tray catch for error viewing\n\t\t\t\t//deserialize(turn from string back into object)\n\t\t\t\tsaved = JSON.parse(saved)\n\t\t\t} catch(err){\n\t\t\t\tconsole.log(err)\n\t\t\t}\n\t\t}\n\t\treturn saved;\n\t})\n\tconst [numRewards, setNumRewards] = useState(() => {\n\t\tlet saved = window.localStorage.getItem(\"numberRewards\") || 0;\n\t\tif(saved !== 0){\n\t\t\ttry{\n\t\t\t\tsaved = JSON.parse(saved);\n\t\t\t} catch(err) {\n\t\t\t\tconsole.log(err)\n\t\t\t}\n\t\t}\n\t\treturn saved;\n\t})\n\n\tuseEffect(() => {\n\t\t//must serialize(turn into a string) the object or array for storage, toString method also works\n\t\twindow.localStorage.setItem(\"savedRewards\", JSON.stringify(createdRewards))\n\t\twindow.localStorage.setItem(\"numberReward\", JSON.stringify(numRewards))\n\t}, [createdRewards, numRewards]); //useEffect will happen with any change of these two variables\n\n\n\tfunction renderCategories(){\n\t\treturn (\n\t\t\tcategories.map((title, idx) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Category key={idx} title={title} index={idx} \n\t\t\t\t\trenderRewards={renderRewards} updateReward={updateReward} \n\t\t\t\t\tcreateReward={createReward}/>\n\t\t\t\t)\n\t\t\t})\n\t\t)\n\t}\n\n\tfunction renderRewards(catID){\n\t\t\n\t\treturn createdRewards.map((reward, idx) => {\n\n\t\t\tif(reward.catID === catID){\n\t\t\t\treturn (\n\t\t\t\t\t<Reward key={idx} title={reward.title} createID={reward.createID}\n\t\t\t\t\tidx={reward.idx} catID={catID} updateReward={updateReward}/>\n\t\t\t\t)\n\t\t\t}\n\t\t})\n\t}\n\n\n\tfunction createReward(categoryIdx, item) {\n\t\tlet currRewards = Object.assign([], createdRewards);\n\t\tlet rewardID = item.idx;\n\n\t\tif(!currRewards.some(reward => {\n\t\t\treturn reward.idx === rewardID && reward.catID === categoryIdx\n\t\t})) {\n\t\t\tlet newReward = {\n\t\t\t\ttitle: item.title,\n\t\t\t\tidx: item.idx,\n\t\t\t\tcreateID: numRewards + 1,\n\t\t\t\tcatID: categoryIdx\n\t\t\t}\n\n\t\t\tcurrRewards.push(newReward);\n\t\t\tsetCreatedRewards(currRewards)\n\t\t\tsetNumRewards(numRewards + 1)\n\t\t}\n\n\t}\n\n\tfunction updateReward(createID, categoryIdx) {\n\t\tlet currRewards = Object.assign([], createdRewards);\n\t\tlet rewardIdx = currRewards.findIndex(reward => reward.createID === createID)\n\n\t\tif(categoryIdx !== undefined) {\n\t\t\tlet reward = currRewards[rewardIdx];\n\t\t\tif (!currRewards.some(item => {\n\t\t\t\treturn item.idx === reward.idx && item.catID === categoryIdx\n\t\t\t})) {\n\t\t\t\t//move option\n\t\t\t\tconsole.log(reward)\n\t\t\t\treward.catID = categoryIdx;\n\t\t\t} else {\n\t\t\t\t//already in that category\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\t//delete option\n\t\t\tcurrRewards.splice(rewardIdx, 1);\n\t\t}\n\t\tsetCreatedRewards(currRewards);\n\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"grid\">\n\t\t\t\t<div className=\"rewards\">\n\t\t\t\t\t<span className=\"reward-heading\">Rewards</span>\n\t\t\t\t\t<div className=\"reward-container\">\n\t\t\t\t\t\t{rewards.map((title, idx) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Reward key={idx} idx={idx} title={title}/>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"categories\">\n\t\t\t\t\t<span className=\"category-heading\">Categories</span>\n\t\t\t\t\t<div className=\"category-container\">\n\t\t\t\t\t\t{renderCategories()}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n    \t</div>\n  \t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* included to give the app access to the DND */}\n    <DndProvider backend={HTML5Backend}>\n      <App />\n    </DndProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}